@model LMSG3.Core.Models.ViewModels.StudentTimeTableViewModel
<style>
    .day-off {
        background: repeating-linear-gradient( 45deg, rgba(0, 0, 0, 0.2), rgba(0, 0, 0, 0.2) 5px, rgba(0, 0, 0, 0.3) 5px, rgba(0, 0, 0, 0.3) 10px )
    }
    /* Time Table */
    .day {
        /*        width: 18%;
        height: 50vh;
        float: left;*/
        background-color: #fff;
        background-image: linear-gradient(rgba(0,0,0,.08) 50%, transparent 50%);
        background-size: 1px 20%;
    }

        .day.time {
            width: 10%;
        }

    .day_title {
        height: 10%;
        background-color: #34495e;
        font-size: 12px;
        font-weight: 600;
        text-transform: uppercase;
        text-align: center;
        line-height: 10vh;
    }

    .hour {
        height: 10%;
        background-color: rgba(52, 73, 94,0.9);
        font-size: 12px;
        text-align: center;
        line-height: 10vh;
    }

    .tt-act {
        width: 100%;
        height: 15vh; /*90min*/
        line-height: 15vh;
        background-color: magenta;
        font-size: 2vw;
        font-weight: 300;
        padding-left: 10px;
    }

        .tt-act.short {
            height: 7.5vh;
            line-height: 7.5vh;
        }
        /* 45min class */
        .tt-act.b15 {
            margin-top: 2.5vh;
        }
        /* after 15 min break */
        .tt-act.b45 {
            margin-top: 7.5vh;
        }
        /* after 45 min break */
        .tt-act.b90 {
            margin-top: 15vh;
        }
        /* after 2x45 min break */
        .tt-act.b135 {
            margin-top: 22.5vh;
        }
    /* after 3x45 min break */

    .green {
        background-color: #2ecc71;
    }

    .turquoise {
        background-color: #1abc9c;
    }

    .navy {
        background-color: #34495e;
    }

    .blue {
        background-color: #3498db;
    }

    .purple {
        background-color: #9b59b6;
    }

    .grey {
        background-color: #bdc3c7;
        color: #202020;
    }

    .gray {
        background-color: #7f8c8d;
    }

    .red {
        background-color: #e74c3c;
    }

    .orange {
        background-color: #f39c12;
    }

    .yellow {
        background-color: #f1c40f;
        color: #303030;
    }

    .spacing {
        background-color: transparent;
    }



    /* Add this attribute to the element that needs a tooltip */
    [data-tooltip] {
        position: relative;
        z-index: 2;
        cursor: pointer;
        width: initial;
    }

        /* Hide the tooltip content by default */
        [data-tooltip]:before,
        [data-tooltip]:after {
            visibility: hidden;
            pointer-events: none;
        }

        /* Position tooltip above the element */
        [data-tooltip]:before {
            position: absolute;
            bottom: 110%;
            left: 50%;
            margin-bottom: 10px;
            margin-left: -75px;
            padding: 7px 5px;
            width: 140px;
            background-color: black;
            color: #fff;
            content: attr(data-tooltip);
            text-align: center;
            font-size: 14px;
            line-height: 1.2;
        }

        /* Triangle hack to make tooltip look like a speech bubble */
        [data-tooltip]:after {
            position: absolute;
            bottom: 110%;
            left: 50%;
            margin-left: -7px;
            margin-bottom: 3px;
            width: 0;
            border-top: 7px solid black;
            border-right: 7px solid transparent;
            border-left: 7px solid transparent;
            content: " ";
            font-size: 0;
            line-height: 0;
        }

        /* Show tooltip content on hover */
        [data-tooltip]:hover:before,
        [data-tooltip]:hover:after {
            visibility: visible;
            bottom: 90%;
        }
</style>

@{var times = new List<string> { "08:00-09:00", "09:00-10:00", "10:00-11:00", "11:00-12:00", "12:00-13:00", "13:00-14:00", "14:00-15:00", "15:00-16:00", "16:00-17:00", "17:00-18:00" };}

@{var days = new List<DayOfWeek> { DayOfWeek.Monday, DayOfWeek.Tuesday, DayOfWeek.Wednesday, DayOfWeek.Thursday, DayOfWeek.Friday};}

<div class="d-flex flex-row overflow-auto justify-content-center align-items-center bg-dark text-light" style="height: 8%">
    <div class="" style="overflow: hidden; display: block;">
        <span>Current Module: @Model.CurrentModuleName</span>
    </div>
    <div class="" style="overflow: hidden; display: block">
        <button type="button" class="btn-sm btn-outline-secondary @(Model.HasWeekPrevious ? "btn-success" : "btn-danger")" onclick="@(Model.HasWeekPrevious ? "loadPTT(" + @Model.Year + ", " + @Model.Week + ", - 1)" : "")"><i class="bi bi-chevron-left"></i></button>
    </div>
    <div class="badge-pill bg-danger align-items-center" style="overflow: hidden; display: block">
        <span>Week @Model.Week</span>
    </div>
    <div class="" style="overflow: hidden; display: block">
        <button type="button" class="btn-sm btn-outline-secondary @(Model.HasWeekNext ? "btn-success" : "btn-danger")" onclick="@(Model.HasWeekNext ? "loadPTT(" + @Model.Year + ", " + @Model.Week + ", + 1)" : "")"><i class="bi bi-chevron-right"></i></button>
    </div>
</div>
<div class="d-flex justify-content-around bg-secondary day" style="height: 8%">
    <div class="h-100" style="width: 14%">
        <div class="" style="overflow: hidden; display: block; height: 100%;">Time</div>
    </div>
    @foreach (var day in days)
    {
        // width auto?
        <div class="h-100" style="width: 16%">
            <div class="" style="overflow: hidden; display: block; height: 100%;">
                <span>@day.ToString()</span>
            </div>
        </div>
    }
</div>
<div class="d-flex justify-content-around bg-secondary day overflow-auto" style="height: 84%">
    @{ 
        int blockSize = 15; //In minutes and divisible by 60
        var startHour = 8;
        var endHour = 18;
        startHour = Math.Min(startHour, Model.activityStartHourMin ?? startHour);
        endHour = Math.Max(endHour, Model.activityEndHourMax ?? endHour);
    }
    <div class="h-100" style="width: 14%">
        @for (int h = startHour; h < endHour; h++)
        {
            var blockTimeSpan = h.ToString("D2") + ":00 - " + (h + 1).ToString("D2") + ":00";
            <div class="badge bg-primary w-100 justify-content-center align-items-center" style="overflow: hidden; display: block; height: 10%;" data-tooltip="English Literature">
                <span class="bg-warning">@blockTimeSpan</span>
            </div>
        }
    </div>
    @foreach (var day in days)
    {
        @if (Model.Activities.ContainsKey(day))
        {
            <div class="h-100" style="width: 16%">
                @{double prevBlock = 0;}
                @foreach (var a in Model.Activities[day])
                {
                    int startBlock = a.StartDate.Hour * 60 / blockSize + a.StartDate.Minute / blockSize; // Gives floor
                    int endBlock;
                    if (a.StartDate.Day == a.EndDate.Day)
                    {
                        endBlock = a.EndDate.Hour * 60 / blockSize + a.EndDate.Minute / blockSize;
                    }
                    else
                    {
                        endBlock = 24 * 4;
                    }

                    var breakBlockSize = (startBlock - prevBlock) * 2.5;
                    prevBlock = endBlock;
                    @if(breakBlockSize != 0)
                    {
                        <div class="badge w-100" style="overflow: hidden; display: block; height: @(breakBlockSize)%">
                        </div>
                    }
                    var activityBlockSize = (endBlock - startBlock) * 2.5;
                    <div class="badge w-100 @(a.InCurrentModule ? "bg-primary" : "bg-secondary")" style="overflow: hidden; display: block; height: @activityBlockSize%" data-tooltip="English Literature">
                        <div>@Html.DisplayFor(modelA => a.ActivityTypeId) : @Html.DisplayFor(modelA => a.Name)</div>
                        <div>@a.StartDate.ToString("t") - @a.EndDate.ToString("t")</div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="h-100" style="width: 16%">
                <div class="bg-danger day-off" style="overflow: hidden; display: block; height: 100%;"></div>
            </div>
        }
    }
</div>