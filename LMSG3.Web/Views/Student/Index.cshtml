
@model LMSG3.Core.Models.ViewModels.StudentIndexViewModel

@{
    Layout = "_LayoutStudent";
}


<partial name="_StudentSidebarPartial" , for="CourseInfo" />

<!-- Page Content -->

<main role="main" class="mt-1 mr-2 w-75">
    <div class="jumbotron pt-0 mt-0">

        <div class="row">

            <div class="col-md-12">
                <div>
                    <div class="" id="pttContent" style="height: 50vh; min-height: 22em; box-shadow: 5px 5px 10px rgba(0,0,0, 0.5); "></div>
                </div>
            </div>
            <br /><br />



            <div class="col-md-6">
                <div class="border-bottom border-top bg-opacity-25">
                    <h4 class="py-2">Assignments</h4>
                </div>

                <div class="col-md-12 mt-2">
                    <partial name="_StudentAssignmentTabsPartial" />
                    <ul class="list-group overflow-auto assignment-list">
                        @{ bool current = false;}
                        @foreach (var a in Model.CurrentModule.Assignments)
                        {

                        <li class="list-group-item justify-content-between assignment-list-item

                        @((a.IsSubmitted) ? "submitted-assignment" : "")
                        @((a.IsOverdue) ? "overdue-assignment" : "")
                        @((!a.IsOverdue && !a.IsSubmitted) ? "upcoming-assignment" :"")"
                            id="@(a.IsCurrent && !current ? "scrollFirst" : "")">

                        @if (a.IsCurrent && !current) { current = true; }
                        <div class="row">
                            <div class="col-6">
                                <div>@Html.DisplayFor(modelA => a.Name)</div>
                                <div class="@(a.IsOverdue ? "text-danger" : (a.IsSubmitted ? "text-success" : "text-dark"))"><p class="small mb-0">Due @Html.DisplayFor(_ => a.EndDate)</p></div>
                            </div>
                            <div class="col-2">
                                @if (a.IsSubmitted)
                                {
                                    <p class="@(a.IsOverdue ? "text-danger" : "text-success")"><i class="bi bi-check2"></i></p>
                                }
                                    @if (a.IsOverdue && !a.IsSubmitted)
                                {
                                    <p class="text-danger"><i class="bi bi-exclamation"></i></p>
                                }
                            </div>
                            <div class="col-2">
                                <a class="btn btn-outline-primary btn-sm" onclick="OpenAssignmentModal(@a.Id)"><i class="bi bi-upload"></i></a>
                            </div>
                            <div class="col-2">
                                @if (a.HasDocument)
                                {
                                    <a class="btn btn-outline-primary btn-sm" onclick="OpenStudentDownloadModal(@a.Id)"><i class="bi bi-download"></i></a>
                                }
                            </div>
                        </div>
                    </li>
                }
                    </ul>
                </div>


            </div>
            <div class="col-md-6">
                <div>
                    <partial name="ModulesList" model="@Model.Modules" />
                </div>
            </div>
            <br />
        </div>
    </div>
</main>
<div class="modal fade" id="assignmentModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header" id='assignmentModalContent'>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="studentDownloadModal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header" id='studentDownloadModalContent'>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_StudentIndexScriptsPartial");}
}