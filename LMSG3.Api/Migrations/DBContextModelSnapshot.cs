// <auto-generated />
using System;
using LMSG3.Api.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LMSG3.Api.Migrations
{
    [DbContext(typeof(DBContext))]
    partial class DBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("LMSG3.Core.Models.Entities.Literature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LiteratureLevelId")
                        .HasColumnType("int");

                    b.Property<int>("LiteratureTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubjectId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LiteratureLevelId");

                    b.HasIndex("LiteratureTypeId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Literatures");
                });

            modelBuilder.Entity("LMSG3.Core.Models.Entities.LiteratureAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LiteratureAuthor");
                });

            modelBuilder.Entity("LMSG3.Core.Models.Entities.LiteratureLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LiteratureLevel");
                });

            modelBuilder.Entity("LMSG3.Core.Models.Entities.LiteratureType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LiteratureType");
                });

            modelBuilder.Entity("LMSG3.Core.Models.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subject");
                });

            modelBuilder.Entity("LiteratureLiteratureAuthor", b =>
                {
                    b.Property<int>("AuthorsId")
                        .HasColumnType("int");

                    b.Property<int>("LiteraturesId")
                        .HasColumnType("int");

                    b.HasKey("AuthorsId", "LiteraturesId");

                    b.HasIndex("LiteraturesId");

                    b.ToTable("LiteratureLiteratureAuthor");
                });

            modelBuilder.Entity("LMSG3.Core.Models.Entities.Literature", b =>
                {
                    b.HasOne("LMSG3.Core.Models.Entities.LiteratureLevel", "LiteratureLevel")
                        .WithMany("Literatures")
                        .HasForeignKey("LiteratureLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMSG3.Core.Models.Entities.LiteratureType", "LiteratureType")
                        .WithMany("Literatures")
                        .HasForeignKey("LiteratureTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMSG3.Core.Models.Entities.Subject", "Subject")
                        .WithMany("Literatures")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LiteratureLevel");

                    b.Navigation("LiteratureType");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("LiteratureLiteratureAuthor", b =>
                {
                    b.HasOne("LMSG3.Core.Models.Entities.LiteratureAuthor", null)
                        .WithMany()
                        .HasForeignKey("AuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LMSG3.Core.Models.Entities.Literature", null)
                        .WithMany()
                        .HasForeignKey("LiteraturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LMSG3.Core.Models.Entities.LiteratureLevel", b =>
                {
                    b.Navigation("Literatures");
                });

            modelBuilder.Entity("LMSG3.Core.Models.Entities.LiteratureType", b =>
                {
                    b.Navigation("Literatures");
                });

            modelBuilder.Entity("LMSG3.Core.Models.Entities.Subject", b =>
                {
                    b.Navigation("Literatures");
                });
#pragma warning restore 612, 618
        }
    }
}
